def x := 'a'..'z'
def z := set(1, 2, 3)

defclass insane_point[T integer, K integer]
  _T = T
  _K = K

def u := insane_point[1, 2]()

def p := list[integer]
def h := list(1, 2, 3)
def n := constant_list[integer]
def r := list![integer](5, 6, 7)
r[1] := 16
def b = r[0] + r[1]

def kz = stack[integer](1, 4, 3)
push!(kz, 5)

; def em = [2, 3] + [5]
; def km = 5 in em
; def ym = 6 in em

next(stack[everything](0), 0)

def uz = [1, 2, 3, 10]

for i = 0 then i + 1 while i < 2
  print(i + 1)

for i in 1..2
  print(i)

def umz = for e in 0..10 using collect 
  collect e * e

def omg = for e in umz using collect
  if e >= 2 and (e mod 2 = 0) then collect e
print(omg...)

def e = [10, 20, 30, 40, 50, 60]
def c = for k in e[2..4] using count
  print(k)
  count
print("count:", c)
print("hello:", e[2..4][0])
print((0..5).min)

def integer(chars string, base 2..36)
  def digit(char '0'..'9') char.code - '0'.code
  def digit(char 'A'..'Z') char.code - 'A'.code + 10
  def digit(char 'a'..'z') char.code - 'a'.code + 10
  def digit(char) 999 

  def result := 0 integer
  def sign   := false
  def digits := false
  for char in chars
    if char = '-' and not sign
      print(char)
      sign := -1
    else if char = '+' and not sign
      print(char)
      sign := +1
    else
      def dig = digit(char)
      if dig < base
        result := result * base + dig
      else
        "invalid"
      sign := sign or 1
      digits := true

  if digits
    result * sign
  else
    "invalid"

def uk = integer("1010", 10)

